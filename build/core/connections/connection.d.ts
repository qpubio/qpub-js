import { EventEmitter } from "../shared/event-emitter";
import { ConnectionEventPayloads } from "../../types/events/payloads";
import { IOptionManager, IAuthManager, ISocketChannelManager } from "../../types/services/managers";
import { IWebSocketClient, ILogger } from "../../types/services/clients";
import { IConnection } from "../../types/services/connection";
export declare class Connection extends EventEmitter<ConnectionEventPayloads> implements IConnection {
    private optionManager;
    private authManager;
    private wsClient;
    private channelManager;
    private logger;
    private socket;
    private reconnectAttempts;
    private reconnectTimeout?;
    private isReconnecting;
    private isIntentionalDisconnect;
    private _isResetting;
    private pingTimeout?;
    private pendingPings;
    private pingCounter;
    constructor(optionManager: IOptionManager, authManager: IAuthManager, wsClient: IWebSocketClient, channelManager: ISocketChannelManager, logger: ILogger);
    private getAuthenticatedWsUrl;
    connect(): Promise<void>;
    isConnected(): boolean;
    isResetting(): boolean;
    ping(): Promise<number>;
    private setupSocketListeners;
    private setupAuthListeners;
    private setupPingHandler;
    private handlePongResponse;
    private handleConnectionInterrupted;
    private handleConnectionClosed;
    private handleTokenExpired;
    private handleAuthError;
    private calculateReconnectDelay;
    private attemptReconnection;
    disconnect(): void;
    reset(): void;
    private stopAllPendingOperations;
    private cleanupTimers;
    private resetState;
}
//# sourceMappingURL=connection.d.ts.map